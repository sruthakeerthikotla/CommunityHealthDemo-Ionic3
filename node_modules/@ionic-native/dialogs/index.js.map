{"version":3,"sources":["../../../src/@ionic-native/plugins/dialogs/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAkBxE;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AASH,IAAa,OAAO;IAAS,2BAAiB;IAA9C;;IA0DA,CAAC;IAxDC;;;;;;OAMG;IAKH,uBAAK,GAAL,UAAM,OAAe,EAAE,KAAc,EAAE,UAAmB,IAAkB,MAAM,CAAC,CAAC,CAAC;IAErF;;;;;;OAMG;IAKH,yBAAO,GAAP,UAAQ,OAAe,EAAE,KAAc,EAAE,YAAuB,IAAqB,MAAM,CAAC,CAAC,CAAC;IAE9F;;;;;;;OAOG;IAKH,wBAAM,GAAN,UAAO,OAAgB,EAAE,KAAc,EAAE,YAAuB,EAAE,WAAoB,IAAoC,MAAM,CAAC,CAAC,CAAC;IAGnI;;;OAGG;IAIH,sBAAI,GAAJ,UAAK,KAAa,IAAU,CAAC;IAQ/B,cAAC;AAAD,CA1DA,AA0DC,CA1D4B,iBAAiB,GA0D7C;AANM,kBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,sBAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AA5CA;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;oCACmF;AAarF;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;sCAC4F;AAc9F;IAJC,OAAO,CAAC;QACP,YAAY,EAAE,CAAC;QACf,UAAU,EAAE,CAAC;KACd,CAAC;;;;qCACiI;AAUnI;IAHC,OAAO,CAAC;QACP,IAAI,EAAE,IAAI;KACX,CAAC;;;;mCAC2B;AAlDlB,OAAO;IARnB,MAAM,CAAC;QACN,UAAU,EAAE,SAAS;QACrB,MAAM,EAAE,wBAAwB;QAChC,SAAS,EAAE,wBAAwB;QACnC,IAAI,EAAE,kDAAkD;QACxD,SAAS,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,eAAe,EAAE,SAAS,EAAE,YAAY,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,eAAe,CAAC;KACzI,CAAC;GAEW,OAAO,CA0DnB;SA1DY,OAAO","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\n\r\nexport interface DialogsPromptCallback {\r\n\r\n  /**\r\n   * The index of the pressed button. (Number) Note that the index uses one-based indexing, so the value is 1, 2, 3, etc.\r\n   */\r\n  buttonIndex: number;\r\n\r\n  /**\r\n   * The text entered in the prompt dialog box. (String)\r\n   */\r\n  input1: string;\r\n\r\n}\r\n\r\n\r\n/**\r\n * @name Dialogs\r\n * @description\r\n * This plugin gives you ability to access and customize the device native dialogs.\r\n *\r\n * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { Dialogs } from '@ionic-native/dialogs';\r\n *\r\n * constructor(private dialogs: Dialogs) { }\r\n *\r\n * ...\r\n *\r\n * this.dialogs.alert('Hello world')\r\n *   .then(() => console.log('Dialog dismissed'))\r\n *   .catch(e => console.log('Error displaying dialog', e));\r\n *\r\n *\r\n * ```\r\n * @interfaces\r\n * DialogsPromptCallback\r\n */\r\n@Plugin({\r\n  pluginName: 'Dialogs',\r\n  plugin: 'cordova-plugin-dialogs',\r\n  pluginRef: 'navigator.notification',\r\n  repo: 'https://github.com/apache/cordova-plugin-dialogs',\r\n  platforms: ['Amazon Fire OS', 'Android', 'BlackBerry 10', 'Browser', 'Firefox OS', 'iOS', 'Tizen', 'Ubuntu', 'Windows', 'Windows Phone']\r\n})\r\n\r\nexport class Dialogs extends IonicNativePlugin {\r\n\r\n  /**\r\n   * Shows a custom alert or dialog box.\r\n   * @param {string} message Dialog message.\r\n   * @param {string} title Dialog title. (Optional, defaults to Alert)\r\n   * @param {string} buttonName Button name. (Optional, defaults to OK)\r\n   * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 4\r\n  })\r\n  alert(message: string, title?: string, buttonName?: string): Promise<any> { return; }\r\n\r\n  /**\r\n   * Displays a customizable confirmation dialog box.\r\n   * @param {string} message Dialog message.\r\n   * @param {string} title Dialog title. (Optional, defaults to Confirm)\r\n   * @param {Array<string>} buttonLabels Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])\r\n   * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked, or 0 if the user has dismissed the dialog by clicking outside the dialog box. Note that the index use one-based indexing.\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 4\r\n  })\r\n  confirm(message: string, title?: string, buttonLabels?: string[]): Promise<number> { return; }\r\n\r\n  /**\r\n   * Displays a native dialog box that is more customizable than the browser's prompt function.\r\n   * @param {string} message Dialog message.\r\n   * @param {string} title Dialog title. (Optional, defaults to Prompt)\r\n   * @param {Array<string>} buttonLabels  Array of strings specifying button labels. (Optional, defaults to [\"OK\",\"Cancel\"])\r\n   * @param {string} defaultText Default textbox input value.  (Optional, Default: empty string)\r\n   * @returns {Promise<DialogsPromptCallback>} Returns a promise that resolves an object with the button index clicked and the text entered\r\n   */\r\n  @Cordova({\r\n    successIndex: 1,\r\n    errorIndex: 5\r\n  })\r\n  prompt(message?: string, title?: string, buttonLabels?: string[], defaultText?: string): Promise<DialogsPromptCallback> { return; }\r\n\r\n\r\n  /**\r\n   * The device plays a beep sound.\r\n   * @param {numbers} times The number of times to repeat the beep.\r\n   */\r\n  @Cordova({\r\n    sync: true\r\n  })\r\n  beep(times: number): void { }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}